import os
import re
import json
import openai
#
from extract_clean_text import extract_clean_text

# Configura√ß√£o da API
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def _build_system_prompt():
    return (
        "Voc√™ √© um gerador de quest√µes objetivas de alt√≠ssima qualidade.\n"
        "Regras obrigat√≥rias:\n"
        "1) Produza EXATAMENTE um array JSON (sem texto fora do array).\n"
        "2) Cada item: {\"question\": str, \"options\": [str,str,str,str], \"answer\": 0|1|2|3}.\n"
        "3) UMA √∫nica correta por item; as erradas devem ser plaus√≠veis e distintas.\n"
        "4) N√£o copie frases literais do texto; reformule com clareza t√©cnica.\n"
        "5) Evite quest√µes duplicadas ou muito semelhantes.\n"
        "6) Linguagem objetiva, n√≠vel de bancas (PF, PRF, CESPE, FCC), sem ambiguidade.\n"
        "7) Sem coment√°rios, sem justificativas, sem v√≠rgula final ou chaves extras.\n"
        "8) Use exclusivamente informa√ß√µes do [TEXTO]. Se faltar base, reformule para interpreta√ß√£o/estrutura do texto.\n"
        "9) Se n√£o houver material suficiente, foque em infer√™ncia e interpreta√ß√£o do que existe, nunca em conte√∫do externo."
    )

def _few_shot_example():
    return [
        {
            "role": "user",
            "content": (
                "[INSTRU√á√ÉO] Gere 2 quest√µes no formato especificado.\n"
                "[TEXTO] A 'Navega√ß√£o de Cabotagem' refere-se ao transporte mar√≠timo entre portos de um mesmo pa√≠s, "
                "diferente da navega√ß√£o de longo curso, que conecta portos de pa√≠ses distintos."
            )
        },
        {
            "role": "assistant",
            "content": json.dumps([
                {
                    "question": "Qual caracter√≠stica distingue a navega√ß√£o de cabotagem da de longo curso?",
                    "options": [
                        "A cabotagem opera entre portos do mesmo pa√≠s.",
                        "A cabotagem utiliza apenas navios de pequeno porte.",
                        "A cabotagem exige travessia oce√¢nica obrigat√≥ria.",
                        "A cabotagem √© exclusiva para cargas perigosas."
                    ],
                    "answer": 0
                },
                {
                    "question": "Em qual situa√ß√£o a navega√ß√£o de longo curso √© a alternativa adequada?",
                    "options": [
                        "Carga entre dois portos do mesmo litoral.",
                        "Transporte entre portos de pa√≠ses diferentes.",
                        "Distribui√ß√£o entre cidades ribeirinhas.",
                        "Transporte interno em lagos naveg√°veis."
                    ],
                    "answer": 1
                }
            ], ensure_ascii=False)
        }
    ]

def gerar_questoes(texto: str, qtd: int = 40) -> str:
    system_prompt = _build_system_prompt()
    user_prompt = (
        f"[INSTRU√á√ÉO] Com base no conte√∫do abaixo, gere {qtd} quest√µes objetivas (4 alternativas) "
    f"em um √öNICO array JSON minificado de {qtd} objetos. N√ÉO escreva nada antes ou depois do array e  compacte a reda√ß√£o ".\n"
    f"[FORMATO] [{'{'!s}\"question\":\"...\",\"options\":[\"...\",\"...\",\"...\",\"...\"],\"answer\":0..3{'}'!s}] x{qtd}\n"
    f"[TEXTO]\n{texto}"
    )

    messages = [{"role": "system", "content": system_prompt}]
    messages += _few_shot_example()
    messages.append({"role": "user", "content": user_prompt})

    resp = client.chat.completions.create(
        model="gpt-5-nano",
        messages=messages
    )

    raw = resp.choices[0].message.content
    # tenta extrair o array JSON
    m = re.search(r"\[.*\]\s*\Z", raw.strip(), flags=re.S)
    if m:
        return m.group(0)
    return raw.strip()

def salvar_questoes_em_json(questoes_json: str, output_path: str):
    try:
        data = json.loads(questoes_json)
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Quest√µes salvas em {output_path}")
    except Exception as e:
        print("‚ùå Erro ao salvar JSON:", e)

if __name__ == "__main__":
    import sys

    if len(sys.argv) != 3:
        print("Uso: python generate_from_pdf.py <arquivo.pdf> <saida.json>")
        exit(1)

    pdf_path = sys.argv[1]
    output_json = sys.argv[2]

    print("üîç Extraindo texto do PDF...")
    texto_completo = extract_clean_text(pdf_path)

    #print(texto_completo)
    #print(erro)

    print("ü§ñ Enviando para o OpenAI...")
    resposta = gerar_questoes(texto_completo, qtd=40)
    print(resposta)

    print("üíæ Salvando quest√µes...")
    salvar_questoes_em_json(resposta, output_json)