import os
import json
import openai
import pdfplumber

# Configura√ß√£o da API
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def extract_clean_text(pdf_path: str) -> str:
    """Extrai texto limpo de um PDF inteiro."""
    full_text = []
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if text:
                full_text.append(text.strip())
    return "\n".join(full_text)

def gerar_questoes(texto: str, qtd: 40, max_tokens: int = 2*2048) -> str:
    """Envia o texto para a API da OpenAI e solicita quest√µes formatadas em JSON."""
    prompt = (
        f"[TEXTO]: {texto}\n\n"
        f"[INSTRU√á√ÉO]: Com base no conte√∫do acima, elabore {qtd} quest√µes objetivas de m√∫ltipla escolha com 4 alternativas cada, seguindo rigorosamente os crit√©rios abaixo:\n\n"
        f"1. Cada pergunta deve explorar um conceito central, infer√™ncia interpretativa ou aplica√ß√£o pr√°tica relevante do texto.\n"
        f"2. As alternativas devem ser claras, plaus√≠veis, bem escritas e no mesmo n√≠vel t√©cnico e lingu√≠stico.\n"
        f"3. Apenas uma alternativa deve estar correta (sem ambiguidade). As erradas devem parecer cr√≠veis.\n"
        f"4. N√£o copie frases literais. Reformule com linguagem did√°tica, t√©cnica e acess√≠vel.\n"
        f"5. Evite perguntas vagas, gen√©ricas, excessivamente factuais ou puramente memor√≠sticas.\n"
        f"6. Mantenha um n√≠vel adequado de desafio, como em provas da PF, PRF, CESPE ou FCC.\n"
        f"7. Ao final, o resultado deve estar exatamente neste formato JSON:\n\n"
        f"[\n"
        f"  {{\n"
        f"    \"question\": \"Enunciado claro e objetivo da pergunta\",\n"
        f"    \"options\": [\"Alternativa A\", \"Alternativa B\", \"Alternativa C\", \"Alternativa D\"],\n"
        f"    \"answer\": √≠ndice_da_op√ß√£o_correta (0 a 3)\n"
        f"  }},\n"
        f"  ...\n"
        f"]"
    )

    response = client.chat.completions.create(
        model="gpt-4.1-nano",
        messages=[
            {
                "role": "system",
                "content": (
                    "Voc√™ √© um gerador avan√ßado de quest√µes de concursos p√∫blicos. "
                    "Sua miss√£o √© interpretar textos com profundidade e gerar quest√µes objetivas de m√∫ltipla escolha (4 alternativas), "
                    "bem formuladas, desafiadoras e didaticamente eficientes. Suas quest√µes devem seguir crit√©rios t√©cnicos rigorosos, "
                    "com clareza, precis√£o e coer√™ncia pedag√≥gica. Voc√™ tamb√©m √© respons√°vel por revisar linguisticamente cada item, "
                    "evitando ambiguidade, erros conceituais ou alternativas mal escritas. O retorno deve estar 100% no formato JSON especificado."
                )
            },
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=max_tokens
    )
    return response.choices[0].message.content.strip()

def salvar_questoes_em_json(questoes_json: str, output_path: str):
    try:
        data = json.loads(questoes_json)
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Quest√µes salvas em {output_path}")
    except Exception as e:
        print("‚ùå Erro ao salvar JSON:", e)

if __name__ == "__main__":
    import sys

    if len(sys.argv) != 3:
        print("Uso: python generate_from_pdf.py <arquivo.pdf> <saida.json>")
        exit(1)

    pdf_path = sys.argv[1]
    output_json = sys.argv[2]

    print("üîç Extraindo texto do PDF...")
    texto_completo = extract_clean_text(pdf_path)

    print("ü§ñ Enviando para o OpenAI...")
    resposta = gerar_questoes(texto_completo, qtd=40)

    print("üíæ Salvando quest√µes...")
    salvar_questoes_em_json(resposta, output_json)